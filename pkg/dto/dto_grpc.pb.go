// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyValueStoreClient is the client API for KeyValueStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueStoreClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetRing(ctx context.Context, in *GetRingRequest, opts ...grpc.CallOption) (*GetRingResponse, error)
}

type keyValueStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueStoreClient(cc grpc.ClientConnInterface) KeyValueStoreClient {
	return &keyValueStoreClient{cc}
}

func (c *keyValueStoreClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/dto.KeyValueStore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/dto.KeyValueStore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) GetRing(ctx context.Context, in *GetRingRequest, opts ...grpc.CallOption) (*GetRingResponse, error) {
	out := new(GetRingResponse)
	err := c.cc.Invoke(ctx, "/dto.KeyValueStore/GetRing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueStoreServer is the server API for KeyValueStore service.
// All implementations must embed UnimplementedKeyValueStoreServer
// for forward compatibility
type KeyValueStoreServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetRing(context.Context, *GetRingRequest) (*GetRingResponse, error)
	mustEmbedUnimplementedKeyValueStoreServer()
}

// UnimplementedKeyValueStoreServer must be embedded to have forward compatible implementations.
type UnimplementedKeyValueStoreServer struct {
}

func (UnimplementedKeyValueStoreServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKeyValueStoreServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyValueStoreServer) GetRing(context.Context, *GetRingRequest) (*GetRingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRing not implemented")
}
func (UnimplementedKeyValueStoreServer) mustEmbedUnimplementedKeyValueStoreServer() {}

// UnsafeKeyValueStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueStoreServer will
// result in compilation errors.
type UnsafeKeyValueStoreServer interface {
	mustEmbedUnimplementedKeyValueStoreServer()
}

func RegisterKeyValueStoreServer(s grpc.ServiceRegistrar, srv KeyValueStoreServer) {
	s.RegisterService(&KeyValueStore_ServiceDesc, srv)
}

func _KeyValueStore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.KeyValueStore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.KeyValueStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_GetRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).GetRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.KeyValueStore/GetRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).GetRing(ctx, req.(*GetRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueStore_ServiceDesc is the grpc.ServiceDesc for KeyValueStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dto.KeyValueStore",
	HandlerType: (*KeyValueStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KeyValueStore_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeyValueStore_Get_Handler,
		},
		{
			MethodName: "GetRing",
			Handler:    _KeyValueStore_GetRing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/dto/dto.proto",
}

// KeyValueStoreInternalClient is the client API for KeyValueStoreInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueStoreInternalClient interface {
	PutRep(ctx context.Context, in *PutRepRequest, opts ...grpc.CallOption) (*PutRepResponse, error)
	GetRep(ctx context.Context, in *GetRepRequest, opts ...grpc.CallOption) (*GetRepResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
}

type keyValueStoreInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueStoreInternalClient(cc grpc.ClientConnInterface) KeyValueStoreInternalClient {
	return &keyValueStoreInternalClient{cc}
}

func (c *keyValueStoreInternalClient) PutRep(ctx context.Context, in *PutRepRequest, opts ...grpc.CallOption) (*PutRepResponse, error) {
	out := new(PutRepResponse)
	err := c.cc.Invoke(ctx, "/dto.KeyValueStoreInternal/PutRep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreInternalClient) GetRep(ctx context.Context, in *GetRepRequest, opts ...grpc.CallOption) (*GetRepResponse, error) {
	out := new(GetRepResponse)
	err := c.cc.Invoke(ctx, "/dto.KeyValueStoreInternal/GetRep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreInternalClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := c.cc.Invoke(ctx, "/dto.KeyValueStoreInternal/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueStoreInternalServer is the server API for KeyValueStoreInternal service.
// All implementations must embed UnimplementedKeyValueStoreInternalServer
// for forward compatibility
type KeyValueStoreInternalServer interface {
	PutRep(context.Context, *PutRepRequest) (*PutRepResponse, error)
	GetRep(context.Context, *GetRepRequest) (*GetRepResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	mustEmbedUnimplementedKeyValueStoreInternalServer()
}

// UnimplementedKeyValueStoreInternalServer must be embedded to have forward compatible implementations.
type UnimplementedKeyValueStoreInternalServer struct {
}

func (UnimplementedKeyValueStoreInternalServer) PutRep(context.Context, *PutRepRequest) (*PutRepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRep not implemented")
}
func (UnimplementedKeyValueStoreInternalServer) GetRep(context.Context, *GetRepRequest) (*GetRepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRep not implemented")
}
func (UnimplementedKeyValueStoreInternalServer) HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedKeyValueStoreInternalServer) mustEmbedUnimplementedKeyValueStoreInternalServer() {}

// UnsafeKeyValueStoreInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueStoreInternalServer will
// result in compilation errors.
type UnsafeKeyValueStoreInternalServer interface {
	mustEmbedUnimplementedKeyValueStoreInternalServer()
}

func RegisterKeyValueStoreInternalServer(s grpc.ServiceRegistrar, srv KeyValueStoreInternalServer) {
	s.RegisterService(&KeyValueStoreInternal_ServiceDesc, srv)
}

func _KeyValueStoreInternal_PutRep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreInternalServer).PutRep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.KeyValueStoreInternal/PutRep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreInternalServer).PutRep(ctx, req.(*PutRepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStoreInternal_GetRep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreInternalServer).GetRep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.KeyValueStoreInternal/GetRep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreInternalServer).GetRep(ctx, req.(*GetRepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStoreInternal_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreInternalServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.KeyValueStoreInternal/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreInternalServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueStoreInternal_ServiceDesc is the grpc.ServiceDesc for KeyValueStoreInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueStoreInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dto.KeyValueStoreInternal",
	HandlerType: (*KeyValueStoreInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutRep",
			Handler:    _KeyValueStoreInternal_PutRep_Handler,
		},
		{
			MethodName: "GetRep",
			Handler:    _KeyValueStoreInternal_GetRep_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _KeyValueStoreInternal_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/dto/dto.proto",
}
