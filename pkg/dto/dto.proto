//go:generate protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./pkg/dto/dto.proto

syntax = "proto3";
option go_package = "github.com/heyuhang0/DSCProject/pkg/dto";
package dto;

service KeyValueStore {
  rpc Put (PutRequest) returns (PutResponse) {}
  rpc Get (GetRequest) returns (GetResponse) {}
}

service KeyValueStoreInternal {
  rpc PutRep (PutRepRequest) returns (PutRepResponse) {}
  rpc GetRep (GetRepRequest) returns (GetRepResponse) {}
}

enum SuccessStatus{
  PARTIAL_SUCCESS = 0;
  FULLY_SUCCESS = 1;
}

enum FoundKey {
  KEY_NOT_FOUND = 0;
  KEY_FOUND = 1;
}

message PutRequest {
  bytes key = 1;
  bytes object = 2;
}

message PutResponse {
  SuccessStatus successStatus = 1;
}

message GetRequest {
  bytes key = 1;
}

message GetResponse {
  bytes object = 1;
  SuccessStatus successStatus = 2;
  FoundKey foundKey = 3;
}

message VectorClock {
  map<int64, int64> vclock = 1;
  int64 machineID = 2;
}

message VersionedData {
  bytes object = 1;
  VectorClock version = 2;
}

message PutRepRequest {
  bytes key = 1;
  VersionedData data = 2;
  VectorClock vectorclock = 3;
}

message PutRepResponse {
  VectorClock vectorclock = 1;
}

message GetRepRequest {
  bytes key = 1;
  VectorClock vectorclock = 2;
}

message GetRepResponse {
  VersionedData data = 1;
  VectorClock vectorclock = 2;
}

message Consistent {
  int64 numVNodes = 1;
  repeated uint64 nodes = 2 [packed = true];
}
